openapi: 3.0.1
info:
  version: 1.0.0
  title: HackerNews G14A
  description: "Projecte de l'assignatura d'ASW. <br> Membres:<li>Pau Redon Milian <br> <li> Jaume Armengol Tapiolas <br> <li> Antonio Barrantes Montilla <br> <li> Alejandro Santandreu Rodriguez <br> <li> Joel Crespo Tugores"
servers:
  - url: 'http://54.152.54.176:8080'
paths:
  /contribucios:
    get:
      tags:
      - contribucios
      summary: Retrieves all the Contributions
      operationId: getAllContribucios
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contribucio'
                  
    post:
      tags:
      - contribucios
      summary: Adds a new contribution to Hacker News
      operationId: addContribution
      requestBody:
        description: Provide the author, url & content of the new Contribution. URL must be valid. User must provide either URL or content. Providing both will make content be a Comment or text plain.
        content:
          application/json:
            schema:
              required:
              - tittle
              - url
              type: object
              properties:
                tittle:
                  type: string
                  minLength: 4
                  example: 'My title'
                url:
                  type: string
                  format: url
                  example: 'Contribution url'
                content:
                  type: string
                  example: 'Contribution content'
        required: true
      responses:
        201:
          description: Contribution created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribucio'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
  /tweets/{tweetId}:
    get:
      tags:
      - tweets
      summary: Finds a Tweet by its ID
      description: Returns a single Tweet
      operationId: getTweetById
      parameters:
      - name: tweetId
        in: path
        description: ID of Tweet to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    delete:
      tags:
      - tweets
      summary: Deletes a Tweet
      operationId: deleteTweet
      parameters:
      - name: tweetId
        in: path
        description: Tweet id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Tweet deleted
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
      - ApiKeyAuth: []
  /tweets/{tweetId}/likes:
    post:
      tags:
      - tweets
      summary: Likes a Tweet
      operationId: likeTweet
      parameters:
      - name: tweetId
        in: path
        description: Tweet id to like
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Liked Tweet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contribucio'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
components:
  schemas:
    Contribucio:
      type: object
      required: [id, author, tittle, likes, comments, _links]
      properties:
        id:
          type: integer
          format: int64
          example: "My id"
        author:
          type: string
          minLength: 4
          example: 'My name'
        tittle:
          type: string
          minLength: 4
          example: 'My name'
        url:
          type: string
          format: url
          example: 'http://myurl.com'
        content:
          type: string
          example: 'My content'
        likes:
          type: integer
          format: int32
          default: 0
        created_at:
          type: string
          format: date-time
        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: 'https://asw-api-demo.herokuapp.com/contribucios/myid'
    AddTweetResult:
      type: object
      properties:
        new_tweet:
          $ref: '#/components/schemas/Tweet'
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is too long (maximum is 280 characters)"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "No Tweet with that ID"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header